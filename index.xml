<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code like a Walrus</title>
    <link>https://reganryannz.github.io/</link>
    <description>Recent content on Code like a Walrus</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Aug 2016 09:21:22 +1200</lastBuildDate>
    <atom:link href="https://reganryannz.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Navigating Less</title>
      <link>https://reganryannz.github.io/post/navigating-less/</link>
      <pubDate>Wed, 10 Aug 2016 09:21:22 +1200</pubDate>
      
      <guid>https://reganryannz.github.io/post/navigating-less/</guid>
      <description>&lt;p&gt;Several git commands, such as &lt;code&gt;git log&lt;/code&gt;, bring you into the Unix Less program. This looks like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;commit 3abb211726b175b326afade16adc79876dfc3905
Author: Regan Ryan &amp;lt;regan.ryan@email.com&amp;gt;
Date:   Tue Aug 9 16:38:20 2016 +1200

    added super admin buttons to act/deactivate account

commit 396a65574144f880b12b351ea319fb1300f4e81a
Author: Regan Ryan &amp;lt;regan.ryan@email.com&amp;gt;
Date:   Tue Aug 9 14:45:12 2016 +1200

    making admin partials (to be unified with publisher partials)

commit 8cafcbf8e3ca864ed2f37ce4ea8f4cdf85238951
Author: Regan Ryan &amp;lt;regan.ryan@email.com&amp;gt;
Date:   Tue Aug 9 13:11:41 2016 +1200

    added account fields to active pub (admin view)

commit 9709e2c1819cb5c23aa77fb832beefb2f98e5672
Merge: 6d31bd4 44e3c2a
Author: ReganRyanNZ &amp;lt;regan.ryan@email.com&amp;gt;
Date:   Tue Aug 9 14:43:40 2016 +1200

    Merge pull request #75 from ReganRyanNZ/sf-colordefaults

:
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;:&lt;/code&gt; at the end indicates your are inside Less. Here are some basic commands to help navigate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; quits out of Less.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt; next line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;k&lt;/code&gt; previous line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; forward one screenful.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; back one screenful.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; type in a phrase and press &lt;code&gt;Enter&lt;/code&gt; to search.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; find next.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N&lt;/code&gt; find previous.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Test Interfaces Only</title>
      <link>https://reganryannz.github.io/post/test-interfaces-only/</link>
      <pubDate>Mon, 08 Aug 2016 17:11:45 +1200</pubDate>
      
      <guid>https://reganryannz.github.io/post/test-interfaces-only/</guid>
      <description>&lt;p&gt;Learning code, I never liked tests. Why? Because the process went like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write code that works (by manually looking at the results).&lt;/li&gt;
&lt;li&gt;Write tests to satisfy professors/people that wanted to see tests.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My initial naive thought was: &amp;ldquo;Why write more code? These tests aren&amp;rsquo;t useful, I&amp;rsquo;ve already written the code I need, and it works.&amp;rdquo; Those were dark days, my friend. Then a highly recommended book came my way, Practical Object-oriented Design In Ruby, that showed me code &lt;em&gt;changes&lt;/em&gt; a lot. Like, a lot. Without tests, you&amp;rsquo;ll need to manually look at &lt;em&gt;everything&lt;/em&gt; whenever you make a change, to ensure nothing got broken. My process then became this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write code that works (by manually looking at the results).&lt;/li&gt;
&lt;li&gt;Write tests on everything, to prove that it works without needing manual inspection.&lt;/li&gt;
&lt;li&gt;Change the code a little bit.&lt;/li&gt;
&lt;li&gt;Flip the table because half the tests are now broken (but the code is correct).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After reading the aforementioned textbook a bit more, I realised why I was having such an awful time. I wasn&amp;rsquo;t just testing for the expected output, I was also testing the implementation. I demanded the specific &amp;ldquo;what&amp;rdquo;, and I demanded the specific &amp;ldquo;how&amp;rdquo; as well.&lt;/p&gt;

&lt;p&gt;If you, reader, have a sinking feeling that this is you too, then listen closely. Every object should have a public interface (how others talk to it), and a private implementation (how it figures out how to give others what they want). The public methods are the menu at a restaurant. The private methods are the kitchen out back.&lt;/p&gt;

&lt;p&gt;With this in mind, consider the following question: If you ask for an item from the menu, does it matter &lt;em&gt;how&lt;/em&gt; that item is prepared? Did they use a spatula or a spoon? Was the stove on medium heat or high? As long as you get your food, it doesn&amp;rsquo;t matter what specific method they used. With this break through my process is now this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write code that works (by manually looking at the results).&lt;/li&gt;
&lt;li&gt;Write tests for the interfaces between objects (checking the output of public methods).&lt;/li&gt;
&lt;li&gt;Change the code a little bit (different setup in the kitchen).&lt;/li&gt;
&lt;li&gt;Run tests to ensure the right food is still being served.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now I can make a change to the inner workings of my code, run my test suite, and know that the program still works. My tests don&amp;rsquo;t trip me up, because I&amp;rsquo;m not enforcing the &amp;ldquo;how&amp;rdquo;, only the resulting &amp;ldquo;what&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Underscore To Speed Up Console Testing</title>
      <link>https://reganryannz.github.io/post/use-underscore-to-speed-up-console-testing/</link>
      <pubDate>Fri, 05 Aug 2016 16:54:11 +1200</pubDate>
      
      <guid>https://reganryannz.github.io/post/use-underscore-to-speed-up-console-testing/</guid>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; use &lt;code&gt;_&lt;/code&gt; to reference the last returned value in the console, but make sure you store it somewhere!&lt;/p&gt;

&lt;p&gt;The Rails Console &lt;code&gt;rails c&lt;/code&gt; is a great tool for quick testingâ€”checking if you have the right syntax in a chain of commands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rails&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# How many users have subscribed to email updates?&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@supporters&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;donation_preferences&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;email_updates&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I often do something like the above, only to realise I didn&amp;rsquo;t save that result. If I want to mess around with the data, I&amp;rsquo;d need to type it out again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# How many users have subscribed to email updates?&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;supporters&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@supporters&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;donation_preferences&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;email_updates&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;supporters&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;557&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So here&amp;rsquo;s the neat little trick: use &lt;code&gt;_&lt;/code&gt; to get the &lt;em&gt;last returned data&lt;/em&gt; from the console.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# How many users have subscribed to email updates?&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@supporters&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;donation_preferences&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;email_updates&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;557&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above example, you can see that if you forgot to set your data to a variable, you can easily access it by the &lt;code&gt;_&lt;/code&gt; shortcut. However there is one problem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# How many users have subscribed to email updates?&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@supporters&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;donation_preferences&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;email_updates&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;557&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What happened here? &lt;code&gt;_&lt;/code&gt; is very unstableâ€”it will always return the &lt;em&gt;last returned value&lt;/em&gt;. In other words, the first &lt;code&gt;_.size&lt;/code&gt; was the number of &lt;code&gt;@supporters&lt;/code&gt;. The second &lt;code&gt;_.size&lt;/code&gt; actually returned &lt;code&gt;557.size&lt;/code&gt; which is &lt;code&gt;8&lt;/code&gt; (bytes).&lt;/p&gt;

&lt;p&gt;So, the best practice I have found is to use &lt;code&gt;_&lt;/code&gt; when you need to get the data, but immediately saved it to a more reliable variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# How many users have subscribed to email updates?&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@supporters&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;donation_preferences&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;email_updates&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;supporters&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;supporters&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;557&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>