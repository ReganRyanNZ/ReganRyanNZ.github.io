<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Code like a Walrus</title>
    <link>https://reganryannz.github.io/tags/testing/</link>
    <description>Recent content in Testing on Code like a Walrus</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Aug 2016 17:11:45 +1200</lastBuildDate>
    <atom:link href="https://reganryannz.github.io/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Test Interfaces Only</title>
      <link>https://reganryannz.github.io/post/test-interfaces-only/</link>
      <pubDate>Mon, 08 Aug 2016 17:11:45 +1200</pubDate>
      
      <guid>https://reganryannz.github.io/post/test-interfaces-only/</guid>
      <description>&lt;p&gt;Learning code, I never liked tests. Why? Because the process went like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write code that works (by manually looking at the results).&lt;/li&gt;
&lt;li&gt;Write tests to satisfy professors/people that wanted to see tests.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My initial naive thought was: &amp;ldquo;Why write more code? These tests aren&amp;rsquo;t useful, I&amp;rsquo;ve already written the code I need, and it works.&amp;rdquo; Those were dark days, my friend. Then a highly recommended book came my way, Practical Object-oriented Design In Ruby, that showed me code &lt;em&gt;changes&lt;/em&gt; a lot. Like, a lot. Without tests, you&amp;rsquo;ll need to manually look at &lt;em&gt;everything&lt;/em&gt; whenever you make a change, to ensure nothing got broken. My process then became this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write code that works (by manually looking at the results).&lt;/li&gt;
&lt;li&gt;Write tests on everything, to prove that it works without needing manual inspection.&lt;/li&gt;
&lt;li&gt;Change the code a little bit.&lt;/li&gt;
&lt;li&gt;Flip the table because half the tests are now broken (but the code is correct).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After reading the aforementioned textbook a bit more, I realised why I was having such an awful time. I wasn&amp;rsquo;t just testing for the expected output, I was also testing the implementation. I demanded the specific &amp;ldquo;what&amp;rdquo;, and I demanded the specific &amp;ldquo;how&amp;rdquo; as well.&lt;/p&gt;

&lt;p&gt;If you, reader, have a sinking feeling that this is you too, then listen closely. Every object should have a public interface (how others talk to it), and a private implementation (how it figures out how to give others what they want). The public methods are the menu at a restaurant. The private methods are the kitchen out back.&lt;/p&gt;

&lt;p&gt;With this in mind, consider the following question: If you ask for an item from the menu, does it matter &lt;em&gt;how&lt;/em&gt; that item is prepared? Did they use a spatula or a spoon? Was the stove on medium heat or high? As long as you get your food, it doesn&amp;rsquo;t matter what specific method they used. With this break through my process is now this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write code that works (by manually looking at the results).&lt;/li&gt;
&lt;li&gt;Write tests for the interfaces between objects (checking the output of public methods).&lt;/li&gt;
&lt;li&gt;Change the code a little bit (different setup in the kitchen).&lt;/li&gt;
&lt;li&gt;Run tests to ensure the right food is still being served.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now I can make a change to the inner workings of my code, run my test suite, and know that the program still works. My tests don&amp;rsquo;t trip me up, because I&amp;rsquo;m not enforcing the &amp;ldquo;how&amp;rdquo;, only the resulting &amp;ldquo;what&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>